{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { YouTube } from 'popyt';\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    }\n  } = req;\n  const secrets = {\n    key: process.env.YOUTUBE_KEY,\n    channelId: process.en.YOUTUBE_CHANNEL_EN\n  };\n  const {\n    key,\n    channelId\n  } = secrets;\n  const youtube = new YouTube(key);\n  const playlists = await youtube.getChannelPlaylists(channelId);\n  const formattedPlaylists = playlists.map(item => ({\n    id: item.id,\n    title: item.title\n  }));\n  const playlistItems = await Promise.all(formattedPlaylists.map(async playlist => {\n    let videos = await youtube.getPlaylistItems(playlist.id);\n    videos = videos.map(({\n      id,\n      title,\n      description,\n      thumbnails,\n      tags,\n      date,\n      url\n    }) => ({\n      id,\n      title,\n      description,\n      thumbnails,\n      tags,\n      date,\n      url\n    }));\n    return _objectSpread({}, playlist, {\n      videos\n    });\n  }));\n  console.log(playlistItems);\n  res.status(200).json({\n    playlistItems\n  });\n});","map":{"version":3,"sources":["/Users/acampora/personal/frontend-topics-v2/pages/api/all-videos-en.js"],"names":["YouTube","req","res","query","id","secrets","key","process","env","YOUTUBE_KEY","channelId","en","YOUTUBE_CHANNEL_EN","youtube","playlists","getChannelPlaylists","formattedPlaylists","map","item","title","playlistItems","Promise","all","playlist","videos","getPlaylistItems","description","thumbnails","tags","date","url","console","log","status","json"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AACLC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AADF,MAEFH,GAFJ;AAIA,QAAMI,OAAO,GAAG;AACfC,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,WADF;AAEfC,IAAAA,SAAS,EAAEH,OAAO,CAACI,EAAR,CAAWC;AAFP,GAAhB;AAKA,QAAM;AAAEN,IAAAA,GAAF;AAAOI,IAAAA;AAAP,MAAqBL,OAA3B;AAEA,QAAMQ,OAAO,GAAG,IAAIb,OAAJ,CAAYM,GAAZ,CAAhB;AAEA,QAAMQ,SAAS,GAAG,MAAMD,OAAO,CAACE,mBAAR,CAA4BL,SAA5B,CAAxB;AAEA,QAAMM,kBAAkB,GAAGF,SAAS,CAACG,GAAV,CAAcC,IAAI,KAAK;AACjDd,IAAAA,EAAE,EAAEc,IAAI,CAACd,EADwC;AAEjDe,IAAAA,KAAK,EAAED,IAAI,CAACC;AAFqC,GAAL,CAAlB,CAA3B;AAKA,QAAMC,aAAa,GAAG,MAAMC,OAAO,CAACC,GAAR,CAC3BN,kBAAkB,CAACC,GAAnB,CAAuB,MAAMM,QAAN,IAAkB;AACxC,QAAIC,MAAM,GAAG,MAAMX,OAAO,CAACY,gBAAR,CAAyBF,QAAQ,CAACnB,EAAlC,CAAnB;AACAoB,IAAAA,MAAM,GAAGA,MAAM,CAACP,GAAP,CACR,CAAC;AAAEb,MAAAA,EAAF;AAAMe,MAAAA,KAAN;AAAaO,MAAAA,WAAb;AAA0BC,MAAAA,UAA1B;AAAsCC,MAAAA,IAAtC;AAA4CC,MAAAA,IAA5C;AAAkDC,MAAAA;AAAlD,KAAD,MAA8D;AAC7D1B,MAAAA,EAD6D;AAE7De,MAAAA,KAF6D;AAG7DO,MAAAA,WAH6D;AAI7DC,MAAAA,UAJ6D;AAK7DC,MAAAA,IAL6D;AAM7DC,MAAAA,IAN6D;AAO7DC,MAAAA;AAP6D,KAA9D,CADQ,CAAT;AAWA,6BACIP,QADJ;AAECC,MAAAA;AAFD;AAIA,GAjBD,CAD2B,CAA5B;AAqBAO,EAAAA,OAAO,CAACC,GAAR,CAAYZ,aAAZ;AAEAlB,EAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEd,IAAAA;AAAF,GAArB;AACA,CA7CD","sourcesContent":["import { YouTube } from 'popyt';\n\nexport default async (req, res) => {\n\tconst {\n\t\tquery: { id },\n\t} = req;\n\n\tconst secrets = {\n\t\tkey: process.env.YOUTUBE_KEY,\n\t\tchannelId: process.en.YOUTUBE_CHANNEL_EN,\n\t};\n\n\tconst { key, channelId } = secrets;\n\n\tconst youtube = new YouTube(key);\n\n\tconst playlists = await youtube.getChannelPlaylists(channelId);\n\n\tconst formattedPlaylists = playlists.map(item => ({\n\t\tid: item.id,\n\t\ttitle: item.title,\n\t}));\n\n\tconst playlistItems = await Promise.all(\n\t\tformattedPlaylists.map(async playlist => {\n\t\t\tlet videos = await youtube.getPlaylistItems(playlist.id);\n\t\t\tvideos = videos.map(\n\t\t\t\t({ id, title, description, thumbnails, tags, date, url }) => ({\n\t\t\t\t\tid,\n\t\t\t\t\ttitle,\n\t\t\t\t\tdescription,\n\t\t\t\t\tthumbnails,\n\t\t\t\t\ttags,\n\t\t\t\t\tdate,\n\t\t\t\t\turl,\n\t\t\t\t}),\n\t\t\t);\n\t\t\treturn {\n\t\t\t\t...playlist,\n\t\t\t\tvideos,\n\t\t\t};\n\t\t}),\n\t);\n\n\tconsole.log(playlistItems);\n\n\tres.status(200).json({ playlistItems });\n};\n"]},"metadata":{},"sourceType":"module"}