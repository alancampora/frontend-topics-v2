{"ast":null,"code":"import youtube from 'youtube-api';\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    }\n  } = req;\n  const secrets = {\n    key: 'AIzaSyAjrLNmU6IY5s7dRF4L1EkIbEkg-nmbKrE',\n    pageToken: 'AIzaSyBN9bCyequaW_iJRxEkd14leXW2f9Cw71Q',\n    channelId: 'UCQ_dGc7VM1kYl19K0viWW4A'\n  };\n  const {\n    keyBackup,\n    channelId\n  } = secrets;\n  const videos = await youtube.playlists.list({\n    type: 'video',\n    part: 'snippet',\n    pageToken: pageToken,\n    maxResults: 50,\n    channelId: channelId\n  }, (err, data) => resolve(data));\n  console.log({\n    videos\n  });\n  res.json({\n    videos\n  });\n});","map":{"version":3,"sources":["/Users/acampora/personal/frontend-topics-v2/pages/api/all-videos-en.js"],"names":["youtube","req","res","query","id","secrets","key","pageToken","channelId","keyBackup","videos","playlists","list","type","part","maxResults","err","data","resolve","console","log","json"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,aAApB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AACLC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AADF,MAEFH,GAFJ;AAIA,QAAMI,OAAO,GAAG;AACfC,IAAAA,GAAG,EAAE,yCADU;AAEfC,IAAAA,SAAS,EAAE,yCAFI;AAGfC,IAAAA,SAAS,EAAE;AAHI,GAAhB;AAMA,QAAM;AAAEC,IAAAA,SAAF;AAAaD,IAAAA;AAAb,MAA2BH,OAAjC;AAEA,QAAMK,MAAM,GAAG,MAAMV,OAAO,CAACW,SAAR,CAAkBC,IAAlB,CACpB;AACCC,IAAAA,IAAI,EAAE,OADP;AAECC,IAAAA,IAAI,EAAE,SAFP;AAGCP,IAAAA,SAAS,EAAEA,SAHZ;AAICQ,IAAAA,UAAU,EAAE,EAJb;AAKCP,IAAAA,SAAS,EAAEA;AALZ,GADoB,EAQpB,CAACQ,GAAD,EAAMC,IAAN,KAAeC,OAAO,CAACD,IAAD,CARF,CAArB;AAWCE,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACV,IAAAA;AAAD,GAAZ;AAEDR,EAAAA,GAAG,CAACmB,IAAJ,CAAS;AAAEX,IAAAA;AAAF,GAAT;AACA,CA3BD","sourcesContent":["import youtube from 'youtube-api';\n\nexport default async (req, res) => {\n\tconst {\n\t\tquery: { id },\n\t} = req;\n\n\tconst secrets = {\n\t\tkey: 'AIzaSyAjrLNmU6IY5s7dRF4L1EkIbEkg-nmbKrE',\n\t\tpageToken: 'AIzaSyBN9bCyequaW_iJRxEkd14leXW2f9Cw71Q',\n\t\tchannelId: 'UCQ_dGc7VM1kYl19K0viWW4A',\n\t};\n\n\tconst { keyBackup, channelId } = secrets;\n\n\tconst videos = await youtube.playlists.list(\n\t\t{\n\t\t\ttype: 'video',\n\t\t\tpart: 'snippet',\n\t\t\tpageToken: pageToken,\n\t\t\tmaxResults: 50,\n\t\t\tchannelId: channelId,\n\t\t},\n\t\t(err, data) => resolve(data),\n\t);\n\n  console.log({videos});\n\n\tres.json({ videos });\n};\n"]},"metadata":{},"sourceType":"module"}