{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { YouTube } from 'popyt';\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    }\n  } = req;\n  const secrets = {\n    key: 'AIzaSyCSp1D7kTrcqNhY2Py_-6qGs1iBixkDr1o',\n    channelId: 'UCQ_dGc7VM1kYl19K0viWW4A'\n  };\n  const {\n    key,\n    channelId\n  } = secrets;\n  const youtube = new YouTube(key);\n  const playlists = await youtube.getChannelPlaylists(channelId);\n  const formattedPlaylists = playlists.map(item => ({\n    id: item.id,\n    title: item.title\n  }));\n  const playlistItems = formattedPlaylists.reduce(async (acum, playlist) => {\n    const videos = await youtube.getPlaylistItems(playlist.id);\n    acum.push(_objectSpread({}, playlist, {\n      videos\n    }));\n    console.log({\n      acum,\n      playlist,\n      videos\n    });\n    return acum;\n  }, []);\n  res.status(200).json({\n    playlistItems\n  });\n});","map":{"version":3,"sources":["/Users/acampora/personal/frontend-topics-v2/pages/api/all-videos-en.js"],"names":["YouTube","req","res","query","id","secrets","key","channelId","youtube","playlists","getChannelPlaylists","formattedPlaylists","map","item","title","playlistItems","reduce","acum","playlist","videos","getPlaylistItems","push","console","log","status","json"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AACLC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AADF,MAEFH,GAFJ;AAIA,QAAMI,OAAO,GAAG;AACfC,IAAAA,GAAG,EAAE,yCADU;AAEfC,IAAAA,SAAS,EAAE;AAFI,GAAhB;AAKA,QAAM;AAAED,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAqBF,OAA3B;AAEA,QAAMG,OAAO,GAAG,IAAIR,OAAJ,CAAYM,GAAZ,CAAhB;AAEA,QAAMG,SAAS,GAAG,MAAMD,OAAO,CAACE,mBAAR,CAA4BH,SAA5B,CAAxB;AAEA,QAAMI,kBAAkB,GAAGF,SAAS,CAACG,GAAV,CAAcC,IAAI,KAAK;AACjDT,IAAAA,EAAE,EAAES,IAAI,CAACT,EADwC;AAEjDU,IAAAA,KAAK,EAAED,IAAI,CAACC;AAFqC,GAAL,CAAlB,CAA3B;AAKA,QAAMC,aAAa,GAAGJ,kBAAkB,CAACK,MAAnB,CACrB,OAAOC,IAAP,EAAaC,QAAb,KAA0B;AACzB,UAAMC,MAAM,GAAG,MAAMX,OAAO,CAACY,gBAAR,CAAyBF,QAAQ,CAACd,EAAlC,CAArB;AACAa,IAAAA,IAAI,CAACI,IAAL,mBACIH,QADJ;AAECC,MAAAA;AAFD;AAKAG,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEN,MAAAA,IAAF;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,KAAZ;AACA,WAAOF,IAAP;AACA,GAVoB,EAWrB,EAXqB,CAAtB;AAcAf,EAAAA,GAAG,CAACsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEV,IAAAA;AAAF,GAArB;AACA,CApCD","sourcesContent":["import { YouTube } from 'popyt';\n\nexport default async (req, res) => {\n\tconst {\n\t\tquery: { id },\n\t} = req;\n\n\tconst secrets = {\n\t\tkey: 'AIzaSyCSp1D7kTrcqNhY2Py_-6qGs1iBixkDr1o',\n\t\tchannelId: 'UCQ_dGc7VM1kYl19K0viWW4A',\n\t};\n\n\tconst { key, channelId } = secrets;\n\n\tconst youtube = new YouTube(key);\n\n\tconst playlists = await youtube.getChannelPlaylists(channelId);\n\n\tconst formattedPlaylists = playlists.map(item => ({\n\t\tid: item.id,\n\t\ttitle: item.title,\n\t}));\n\n\tconst playlistItems = formattedPlaylists.reduce(\n\t\tasync (acum, playlist) => {\n\t\t\tconst videos = await youtube.getPlaylistItems(playlist.id);\n\t\t\tacum.push({\n\t\t\t\t...playlist,\n\t\t\t\tvideos,\n\t\t\t});\n\n\t\t\tconsole.log({ acum, playlist, videos });\n\t\t\treturn acum;\n\t\t},\n\t\t[],\n\t);\n\n\tres.status(200).json({ playlistItems });\n};\n"]},"metadata":{},"sourceType":"module"}